// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyEMShop.Data.Context;

namespace MyEMShop.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240206180940_ADDShortDescForProduct")]
    partial class ADDShortDescForProduct
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ColorProduct", b =>
                {
                    b.Property<int>("ColorsPC_Id")
                        .HasColumnType("int");

                    b.Property<int>("ProductsProductId")
                        .HasColumnType("int");

                    b.HasKey("ColorsPC_Id", "ProductsProductId");

                    b.HasIndex("ProductsProductId");

                    b.ToTable("ColorProduct");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.AboutUs.AboutUs", b =>
                {
                    b.Property<int>("AboutUsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutUsText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AboutUsId");

                    b.ToTable("AboutUs");

                    b.HasData(
                        new
                        {
                            AboutUsId = 1,
                            AboutUsText = "<p>در فروشگاه به دخت، ما معتقدیم که هر زنی شایسته لباسی زیبا و جذاب برای هر مناسبتی است. ما طیف گسترده ای از لباس های مجلسی زنانه را در طرح ها، رنگ ها و اندازه های مختلف ارائه می دهیم تا هر زنی بتواند لباسی را پیدا کند که به او احساس اعتماد به نفس و زیبایی بدهد.</p> <p>ما به کیفیت لباس های خود متعهد هستیم و فقط از مواد و ساخت با کیفیت بالا استفاده می کنیم. ما همچنین به خدمات مشتری خود متعهد هستیم و تیم ما همیشه آماده کمک به شما در یافتن لباس مناسب برای مناسبت خاص شما است.</p> <p>اگر به دنبال لباس مجلسی زنانه زیبا و با کیفیت هستید، فروشگاه به دخت مکان مناسبی برای شما است. شما طیف گسترده ای از گزینه ها را برای انتخاب دارید و تیم ما همیشه آماده کمک به شما است.</p> <p>در اینجا برخی از دلایلی که چرا باید از فروشگاه به دخت لباس مجلسی بخرید آورده شده است:</p> <ul> <li><strong>ما طیف گسترده ای از لباس های مجلسی زنانه را در طرح ها، رنگ ها و اندازه های مختلف ارائه می دهیم.</strong></li> <li><strong>ما به کیفیت لباس های خود متعهد هستیم و فقط از مواد و ساخت با کیفیت بالا استفاده می کنیم.</strong></li> <li><strong>ما به خدمات مشتری خود متعهد هستیم و تیم ما همیشه آماده کمک به شما در یافتن لباس مناسب برای مناسبت خاص شما است.</strong></li> </ul> <p>ما مشتاقیم تا شما را در فروشگاه خود ببینیم و به شما کمک کنیم تا لباس مجلسی رویایی خود را پیدا کنید.</p> <div> <div> <div>&nbsp;</div> <div> <div> <div>&nbsp;</div> <div> <p>&nbsp;</p> <p>&nbsp;</p> </div> </div> </div> </div> </div>"
                        });
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Banners.Banner", b =>
                {
                    b.Property<int>("BannerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BannerImage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BannerLink")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BannerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BannerType")
                        .HasColumnType("int");

                    b.HasKey("BannerId");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.ContactUs.ContactUsConection", b =>
                {
                    b.Property<int>("CUC_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CUC_Id");

                    b.ToTable("contactUsConections");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.ContactUs.ContactUsInfo", b =>
                {
                    b.Property<int>("ContactUsInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactUsAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactUsDesc")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ContactUsImage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactUsOstanCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactUsPelak")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactUsPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactUsWorkTime")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ContactUsInfoId");

                    b.ToTable("ContactUsInfos");

                    b.HasData(
                        new
                        {
                            ContactUsInfoId = 1,
                            ContactUsAddress = "خیابان امیر کبیر - امیر کبیر 9/5",
                            ContactUsDesc = "فقط در ساعات کاری جوابگو هستیم , زمان دیگر پاسخگو نخواهیم بود",
                            ContactUsOstanCity = "خراسان رضوی - نیشابور",
                            ContactUsPelak = "141",
                            ContactUsPhone = "09015519699",
                            ContactUsWorkTime = "شنبه تا پنج شنبه از ساعت 8 الی 18 به استثنای روزهای تعطیل رسمی"
                        });
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Faq.Faq", b =>
                {
                    b.Property<int>("FaqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FaqAnswer")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FaqGroupId")
                        .HasColumnType("int");

                    b.Property<string>("FaqQuestion")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("FaqId");

                    b.HasIndex("FaqGroupId");

                    b.ToTable("Faqs");

                    b.HasData(
                        new
                        {
                            FaqId = 1,
                            FaqAnswer = "ثبت حساب کاربری برای خرید و ثبت آدرس و موارد لازم برای ارسال سفارش صورت میگیرد",
                            FaqGroupId = 1,
                            FaqQuestion = "ثبت حساب کاربری به چه منظور صورت میگیرد؟"
                        },
                        new
                        {
                            FaqId = 2,
                            FaqAnswer = "از طریق پنل کاربری و قسمت فاکتور های من وضعیت سفارش قابل پیگیری است",
                            FaqGroupId = 1,
                            FaqQuestion = "چطور وضعیت سفارش خود را دنبال کنم؟"
                        },
                        new
                        {
                            FaqId = 3,
                            FaqAnswer = "بله. به این خاطر که محصولی که سفارش داده میشود ، بعد از ثبت سفارش وارد پروسه ی تولید میشود.",
                            FaqGroupId = 1,
                            FaqQuestion = "آیا میتوان محصولی که موجود نیست را سفارش داد؟ "
                        },
                        new
                        {
                            FaqId = 4,
                            FaqAnswer = "بله. برای خرید محصول از فروشگاه به دخت نیاز به ساخت اکانت کاربری است.",
                            FaqGroupId = 2,
                            FaqQuestion = "برای خرید از فروشگاه شما نیاز به اکانت دارم؟ "
                        },
                        new
                        {
                            FaqId = 5,
                            FaqAnswer = "جنس عالی ، دوخت عالی و حرفه ای ",
                            FaqGroupId = 2,
                            FaqQuestion = "مزیت خرید از شما چیست؟ "
                        },
                        new
                        {
                            FaqId = 6,
                            FaqAnswer = " هزینه ی کالای خریداری شده را به دو صورت میتوان پرداخت کرد : 1- از طریق شارژ کیف پول که در قسمت پنل کاربری و قسمت کیف پول قابل دسترسی است . 2- از طریق درگاه پرداخت مستقیم",
                            FaqGroupId = 3,
                            FaqQuestion = "چطور هزینه ی کالای خود را بپردازم؟ "
                        },
                        new
                        {
                            FaqId = 7,
                            FaqAnswer = "بله. مالیات بر ارزش افزوده هم به قیمت کالا اضافه و در قیمت نهایی محاسبه میشود.",
                            FaqGroupId = 3,
                            FaqQuestion = "آیا مالیات هم به قیمت خرید افزوده میشود؟ "
                        },
                        new
                        {
                            FaqId = 8,
                            FaqAnswer = "در قسمت پنل کاربری ، فاکتور های من قابل مشاهده است",
                            FaqGroupId = 4,
                            FaqQuestion = "چطور وضعیت سفارش خود را مشاهده کنم؟"
                        },
                        new
                        {
                            FaqId = 9,
                            FaqAnswer = "فقط تا 12 ساعت بعد از ثبت سفارش امکان لغو سفارش وجود دارد و در غیراین صورت لغو سفارش انجام نخواهد شد.",
                            FaqGroupId = 4,
                            FaqQuestion = "چطور و چه زمانی میتوانم سفارش خود را لغو کنم؟ "
                        },
                        new
                        {
                            FaqId = 10,
                            FaqAnswer = "زمانی که وضعیت سفارش به ارسال شده تغییر پیدا کند یعنی سفارش مشتری تحویل اداره ی پست شده است. و زمان رسیدن سفارش به دست مشتری بستگی به اداره ی پست دارد.",
                            FaqGroupId = 5,
                            FaqQuestion = "کالا چه زمانی به دست من میرسد؟ "
                        },
                        new
                        {
                            FaqId = 11,
                            FaqAnswer = "بستگی به اداره ی پست دارد. ",
                            FaqGroupId = 5,
                            FaqQuestion = "چرا کالا به موقع به من تحویل نشده؟ "
                        },
                        new
                        {
                            FaqId = 12,
                            FaqAnswer = "کالایی که خریداری شده ، قابل بازگشت نیست و فقط میتوان تا 12 ساعت بعد از ثبت فاکتور ،با هماهنگی با واحد پشتیبانی سایت به دخت آن را لغو کرد",
                            FaqGroupId = 5,
                            FaqQuestion = "نیاز به بازگشت یه کالا دارم، چطور باید اقدام کنم؟ "
                        });
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Faq.FaqGroup", b =>
                {
                    b.Property<int>("FaqGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FaqGroupTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FaqGroupId");

                    b.ToTable("FaqGroups");

                    b.HasData(
                        new
                        {
                            FaqGroupId = 1,
                            FaqGroupTitle = "حساب کاربری و سفارشات من"
                        },
                        new
                        {
                            FaqGroupId = 2,
                            FaqGroupTitle = "خرید"
                        },
                        new
                        {
                            FaqGroupId = 3,
                            FaqGroupTitle = "پرداخت ها"
                        },
                        new
                        {
                            FaqGroupId = 4,
                            FaqGroupTitle = "وضعیت سفارش"
                        },
                        new
                        {
                            FaqGroupId = 5,
                            FaqGroupTitle = "حمل و نقل"
                        });
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Order.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsableCount")
                        .HasColumnType("int");

                    b.HasKey("DiscountId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Order.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsFinally")
                        .HasColumnType("bit");

                    b.Property<string>("OrderAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderOstan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderPostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderState")
                        .HasColumnType("int");

                    b.Property<int>("OrderSum")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Order.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Permission.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PermissionId");

                    b.HasIndex("ParentId");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            PermissionTitle = "مدیریت "
                        },
                        new
                        {
                            PermissionId = 2,
                            ParentId = 1,
                            PermissionTitle = "مدیریت کاربران "
                        },
                        new
                        {
                            PermissionId = 3,
                            ParentId = 1,
                            PermissionTitle = "مدیریت نقش ها "
                        },
                        new
                        {
                            PermissionId = 4,
                            ParentId = 2,
                            PermissionTitle = "افزودن کاربر "
                        },
                        new
                        {
                            PermissionId = 5,
                            ParentId = 2,
                            PermissionTitle = "ویرایش کاربر "
                        },
                        new
                        {
                            PermissionId = 6,
                            ParentId = 2,
                            PermissionTitle = "حذف کاربر "
                        },
                        new
                        {
                            PermissionId = 7,
                            ParentId = 3,
                            PermissionTitle = "افزودن نقش "
                        },
                        new
                        {
                            PermissionId = 8,
                            ParentId = 3,
                            PermissionTitle = "ویرایش نقش "
                        },
                        new
                        {
                            PermissionId = 9,
                            ParentId = 3,
                            PermissionTitle = "حذف نقش "
                        },
                        new
                        {
                            PermissionId = 10,
                            ParentId = 2,
                            PermissionTitle = "لیست کاربران حذف شده "
                        },
                        new
                        {
                            PermissionId = 11,
                            ParentId = 2,
                            PermissionTitle = "بازگردانی کاربر "
                        },
                        new
                        {
                            PermissionId = 12,
                            ParentId = 1,
                            PermissionTitle = "مدیریت محصولات "
                        },
                        new
                        {
                            PermissionId = 13,
                            ParentId = 12,
                            PermissionTitle = "افزودن محصول"
                        },
                        new
                        {
                            PermissionId = 14,
                            ParentId = 12,
                            PermissionTitle = "ویرایش محصول"
                        },
                        new
                        {
                            PermissionId = 15,
                            ParentId = 12,
                            PermissionTitle = "حذف محصول"
                        },
                        new
                        {
                            PermissionId = 16,
                            ParentId = 1,
                            PermissionTitle = "مدیریت گروه ها"
                        },
                        new
                        {
                            PermissionId = 17,
                            ParentId = 16,
                            PermissionTitle = "افزودن گروه"
                        },
                        new
                        {
                            PermissionId = 18,
                            ParentId = 16,
                            PermissionTitle = "ویرایش گروه"
                        },
                        new
                        {
                            PermissionId = 19,
                            ParentId = 16,
                            PermissionTitle = "حذف گروه"
                        },
                        new
                        {
                            PermissionId = 20,
                            ParentId = 16,
                            PermissionTitle = "افزودن زیرگروه"
                        },
                        new
                        {
                            PermissionId = 21,
                            ParentId = 16,
                            PermissionTitle = "ویرایش زیرگروه"
                        },
                        new
                        {
                            PermissionId = 22,
                            ParentId = 16,
                            PermissionTitle = "حذف زیرگروه"
                        },
                        new
                        {
                            PermissionId = 23,
                            ParentId = 1,
                            PermissionTitle = "مدیریت سفارشات"
                        },
                        new
                        {
                            PermissionId = 24,
                            ParentId = 23,
                            PermissionTitle = "در حال پردازش"
                        },
                        new
                        {
                            PermissionId = 25,
                            ParentId = 23,
                            PermissionTitle = "آماده ارسال"
                        },
                        new
                        {
                            PermissionId = 26,
                            ParentId = 23,
                            PermissionTitle = "ارسال شده"
                        },
                        new
                        {
                            PermissionId = 27,
                            ParentId = 23,
                            PermissionTitle = "لغو شده"
                        },
                        new
                        {
                            PermissionId = 28,
                            ParentId = 1,
                            PermissionTitle = "مدیریت تخفیف ها"
                        },
                        new
                        {
                            PermissionId = 29,
                            ParentId = 28,
                            PermissionTitle = "لیست تخفیف ها"
                        },
                        new
                        {
                            PermissionId = 30,
                            ParentId = 28,
                            PermissionTitle = "افزودن تخفیف "
                        },
                        new
                        {
                            PermissionId = 31,
                            ParentId = 28,
                            PermissionTitle = "ویرایش تخفیف "
                        },
                        new
                        {
                            PermissionId = 32,
                            ParentId = 1,
                            PermissionTitle = "مدیریت مالیات "
                        },
                        new
                        {
                            PermissionId = 33,
                            ParentId = 32,
                            PermissionTitle = "افزودن مالیات "
                        },
                        new
                        {
                            PermissionId = 34,
                            ParentId = 32,
                            PermissionTitle = "ویرایش مالیات "
                        },
                        new
                        {
                            PermissionId = 35,
                            ParentId = 1,
                            PermissionTitle = "مدیریت اسلایدر ها"
                        },
                        new
                        {
                            PermissionId = 36,
                            ParentId = 35,
                            PermissionTitle = "افزودن اسلایدر "
                        },
                        new
                        {
                            PermissionId = 37,
                            ParentId = 35,
                            PermissionTitle = "حذف اسلایدر "
                        },
                        new
                        {
                            PermissionId = 38,
                            ParentId = 1,
                            PermissionTitle = "مدیریت بنر ها "
                        },
                        new
                        {
                            PermissionId = 39,
                            ParentId = 38,
                            PermissionTitle = "مدیریت بنر های کوچک "
                        },
                        new
                        {
                            PermissionId = 40,
                            ParentId = 38,
                            PermissionTitle = "مدیریت بنر های بزرگ "
                        },
                        new
                        {
                            PermissionId = 41,
                            ParentId = 39,
                            PermissionTitle = "افزودن بنر کوچک "
                        },
                        new
                        {
                            PermissionId = 42,
                            ParentId = 40,
                            PermissionTitle = "افزودن بنر بزرگ "
                        },
                        new
                        {
                            PermissionId = 43,
                            ParentId = 39,
                            PermissionTitle = "ویرایش بنر کوچک چپ"
                        },
                        new
                        {
                            PermissionId = 44,
                            ParentId = 39,
                            PermissionTitle = "ویرایش بنر کوچک وسط چپ "
                        },
                        new
                        {
                            PermissionId = 45,
                            ParentId = 39,
                            PermissionTitle = "ویرایش بنر کوچک وسط راست "
                        },
                        new
                        {
                            PermissionId = 46,
                            ParentId = 39,
                            PermissionTitle = "ویرایش بنر کوچک راست "
                        },
                        new
                        {
                            PermissionId = 47,
                            ParentId = 39,
                            PermissionTitle = "حذف بنر کوچک چپ "
                        },
                        new
                        {
                            PermissionId = 48,
                            ParentId = 39,
                            PermissionTitle = "حذف بنر کوچک وسط چپ "
                        },
                        new
                        {
                            PermissionId = 49,
                            ParentId = 39,
                            PermissionTitle = "حذف بنر کوچک وسط راست "
                        },
                        new
                        {
                            PermissionId = 50,
                            ParentId = 39,
                            PermissionTitle = "ویرایش بنر کوچک راست "
                        },
                        new
                        {
                            PermissionId = 51,
                            ParentId = 40,
                            PermissionTitle = "ویرایش بنر بزرگ چپ "
                        },
                        new
                        {
                            PermissionId = 52,
                            ParentId = 40,
                            PermissionTitle = "ویرایش بنر بزرگ راست "
                        },
                        new
                        {
                            PermissionId = 53,
                            ParentId = 40,
                            PermissionTitle = "حذف بنر بزرگ چپ "
                        },
                        new
                        {
                            PermissionId = 54,
                            ParentId = 40,
                            PermissionTitle = "حذف بنر بزرگ راست "
                        },
                        new
                        {
                            PermissionId = 55,
                            ParentId = 1,
                            PermissionTitle = "مدیریت کامنت ها"
                        },
                        new
                        {
                            PermissionId = 56,
                            ParentId = 1,
                            PermissionTitle = " شرایط و قوانین "
                        },
                        new
                        {
                            PermissionId = 57,
                            ParentId = 56,
                            PermissionTitle = "ویرایش شرایط و قوانین "
                        },
                        new
                        {
                            PermissionId = 58,
                            ParentId = 1,
                            PermissionTitle = "سیاست حریم خصوصی "
                        },
                        new
                        {
                            PermissionId = 59,
                            ParentId = 58,
                            PermissionTitle = "ویرایش سیاست حریم خصوصی"
                        },
                        new
                        {
                            PermissionId = 60,
                            ParentId = 1,
                            PermissionTitle = "مدیریت سوالات متداول"
                        },
                        new
                        {
                            PermissionId = 61,
                            ParentId = 60,
                            PermissionTitle = "مدیریت گروه سوال"
                        },
                        new
                        {
                            PermissionId = 62,
                            ParentId = 60,
                            PermissionTitle = "مدیریت سوالات"
                        },
                        new
                        {
                            PermissionId = 63,
                            ParentId = 61,
                            PermissionTitle = "افزودن گروه سوال"
                        },
                        new
                        {
                            PermissionId = 64,
                            ParentId = 61,
                            PermissionTitle = "ویرایش گروه سوال"
                        },
                        new
                        {
                            PermissionId = 65,
                            ParentId = 61,
                            PermissionTitle = "حذف گروه سوال"
                        },
                        new
                        {
                            PermissionId = 66,
                            ParentId = 62,
                            PermissionTitle = "افزودن سوال"
                        },
                        new
                        {
                            PermissionId = 67,
                            ParentId = 62,
                            PermissionTitle = "ویرایش سوال"
                        },
                        new
                        {
                            PermissionId = 68,
                            ParentId = 62,
                            PermissionTitle = "حذف سوال"
                        },
                        new
                        {
                            PermissionId = 69,
                            ParentId = 1,
                            PermissionTitle = "مدیریت تماس با ما"
                        },
                        new
                        {
                            PermissionId = 70,
                            ParentId = 69,
                            PermissionTitle = "حذف سوال تماس با ما"
                        },
                        new
                        {
                            PermissionId = 71,
                            ParentId = 69,
                            PermissionTitle = "جوابدهی سوال تماس با ما"
                        },
                        new
                        {
                            PermissionId = 72,
                            ParentId = 1,
                            PermissionTitle = "مدیریت اطلاعات تماس با ما"
                        },
                        new
                        {
                            PermissionId = 73,
                            ParentId = 72,
                            PermissionTitle = "افزودن اطلاعات تماس با ما "
                        },
                        new
                        {
                            PermissionId = 74,
                            ParentId = 72,
                            PermissionTitle = "ویرایش اطلاعات تماس با ما"
                        });
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Permission.RolePermission", b =>
                {
                    b.Property<int>("RP_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RP_Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            RP_Id = 1,
                            PermissionId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 2,
                            PermissionId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 3,
                            PermissionId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 4,
                            PermissionId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 5,
                            PermissionId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 6,
                            PermissionId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 7,
                            PermissionId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 8,
                            PermissionId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 9,
                            PermissionId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 10,
                            PermissionId = 10,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 11,
                            PermissionId = 11,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 12,
                            PermissionId = 12,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 13,
                            PermissionId = 13,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 14,
                            PermissionId = 14,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 15,
                            PermissionId = 15,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 16,
                            PermissionId = 16,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 17,
                            PermissionId = 17,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 18,
                            PermissionId = 18,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 19,
                            PermissionId = 19,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 20,
                            PermissionId = 20,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 21,
                            PermissionId = 21,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 22,
                            PermissionId = 22,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 23,
                            PermissionId = 23,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 24,
                            PermissionId = 24,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 25,
                            PermissionId = 25,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 26,
                            PermissionId = 26,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 27,
                            PermissionId = 27,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 28,
                            PermissionId = 28,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 29,
                            PermissionId = 29,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 30,
                            PermissionId = 30,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 31,
                            PermissionId = 31,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 32,
                            PermissionId = 32,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 33,
                            PermissionId = 33,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 34,
                            PermissionId = 34,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 35,
                            PermissionId = 35,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 36,
                            PermissionId = 36,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 37,
                            PermissionId = 37,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 38,
                            PermissionId = 38,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 39,
                            PermissionId = 39,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 40,
                            PermissionId = 40,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 41,
                            PermissionId = 41,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 42,
                            PermissionId = 42,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 43,
                            PermissionId = 43,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 44,
                            PermissionId = 44,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 45,
                            PermissionId = 45,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 46,
                            PermissionId = 46,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 47,
                            PermissionId = 47,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 48,
                            PermissionId = 48,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 49,
                            PermissionId = 49,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 50,
                            PermissionId = 50,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 51,
                            PermissionId = 51,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 52,
                            PermissionId = 52,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 53,
                            PermissionId = 53,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 54,
                            PermissionId = 54,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 55,
                            PermissionId = 55,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 56,
                            PermissionId = 56,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 57,
                            PermissionId = 57,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 58,
                            PermissionId = 58,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 59,
                            PermissionId = 59,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 60,
                            PermissionId = 60,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 61,
                            PermissionId = 61,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 62,
                            PermissionId = 62,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 63,
                            PermissionId = 63,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 64,
                            PermissionId = 64,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 65,
                            PermissionId = 65,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 66,
                            PermissionId = 66,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 67,
                            PermissionId = 67,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 68,
                            PermissionId = 68,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 69,
                            PermissionId = 69,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 70,
                            PermissionId = 70,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 71,
                            PermissionId = 71,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 72,
                            PermissionId = 72,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 73,
                            PermissionId = 73,
                            RoleId = 1
                        },
                        new
                        {
                            RP_Id = 74,
                            PermissionId = 74,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.PrivacyPolicy.Privacy", b =>
                {
                    b.Property<int>("PrivacyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PrivacyText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrivacyId");

                    b.ToTable("Privacies");

                    b.HasData(
                        new
                        {
                            PrivacyId = 1,
                            PrivacyText = "<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img alt=\"\" src=\"/Template/image/product/CkEditors Image/1aef6903-01e5-4e48-b95c-8d07ad3e8dac.png\" style=\"height:250px; width:700px\" /></p>\r\n\r\n<p><strong>سیاست حفظ حریم خصوصی </strong>:</p>\r\n\r\n<p><br />\r\nفروشگاه به دخت با احترام برای حریم شخصی و خصوصی کاربران خود، برای خرید، ثبت نظر و یا استفاده از برخی امکانات سایت ، اطلاعاتی را از کاربران خواهد خواست تا بتواند خدماتی امن و مطمئن به آنها ارائه دهد. همچنین برای پردازش و ارسال پوشاک خریداری شده مشتریان، اطلاعاتی مانند آدرس، شماره تماس و ایمیل مورد نیاز است که ممکن است جهت هماهنگی ارسال و یا تایید آنها، فروشگاه به دخت نسبت به اعتبارسنجی آن اقدام کند.&nbsp;</p>\r\n\r\n<p>فروشگاه به دخت همچنین خود را موظف می داند&nbsp;&nbsp;در حفظ اطلاعات مشتریان نهایت تلاش خود را مبذول دارد. قطعا مورد توجه خواهد بود که عضویت کاربران در وب سایت به دخت، به منزله قبول قوانین جمهوری اسلامی ایران از جمله قوانین تجارت الکترونیک و قوانین مالی و مالیاتی و قوانین سایت فروشگاه به دخت است.&nbsp;</p>\r\n\r\n<p>طی فرایند خرید، فاکتور رسمی و بنا به درخواست مشتریان حقوقی گواهی ارزش افزوده صادر می شود، از این رو وارد کردن اطلاعاتی مانند نام و کدملی برای اشخاص حقیقی&nbsp;&nbsp;لازم است. همچنین آدرس ایمیل و تلفن هایی که مشتری در پروفایل خود ثبت می&shy; کند، تنها &nbsp;آدرس ایمیل و تلفن&shy; های رسمی و مورد تایید مشتری است و تمام مکاتبات و پاسخ های شرکت از طریق آنها صورت می گیرد.</p>\r\n\r\n<p>فروشگاه لباس زنانه به دخت ممکن است نقد و نظرهای ارسالی کاربران را در راستای رعایت &nbsp;قوانین وب سایت ویرایش کند. همچنین اگر نظر یا پیام ارسال شده توسط کاربر، مشمول مصادیق محتوای مجرمانه باشد، فروشگاه لباس زنانه نیک می&zwnj;تواند از اطلاعات ثبت شده برای پیگیری قانونی استفاده کند. حفظ و نگهداری رمز عبور بر عهده کاربران است و برای جلوگیری از هرگونه سوءاستفاده احتمالی، کاربران نباید آن را برای شخص دیگری فاش کنند. فروشگاه لباس زنانه به دخت هویت شخصی کاربران را محرمانه دانسته و اطلاعات شخصی آنان را به هیچ شخص یا سازمان دیگری منتقل نمی&zwnj;کند، مگر اینکه با حکم قانونی مجبور باشد اطلاعاتی را در اختیار مراجع ذی&zwnj;صلاح قرار دهد. فروشگاه به دخت مانند اکثر وب سایت&zwnj;ها از جمع آوری IP و کوکی &zwnj;ها استفاده می&zwnj;کند، اما پروتکل، سرور و لایه&zwnj;های امنیتی سایت به دخت و روش&zwnj; های مناسب مدیریت داده&zwnj;ها اطلاعات کاربران را محافظت و از دسترسی&zwnj; های غیر قانونی جلوگیری می&zwnj;کند.&nbsp;&nbsp;فروشگاه به دخت برای حفاظت و نگهداری اطلاعات و حریم شخصی کاربران همه&shy; توان خود را به کار می&zwnj;گیرد و امیدوار است که تجربه&zwnj; خریدی امن، راحت و خوشایند پوشاک را به مشتریان خود ارائه نماید.</p>\r\n"
                        });
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.Color", b =>
                {
                    b.Property<int>("PC_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PC_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("PC_Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.FavoriteProducts", b =>
                {
                    b.Property<int>("FP_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FP_Id");

                    b.HasIndex("ProductId");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.Level", b =>
                {
                    b.Property<int>("PL_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PL_Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PL_Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            PL_Id = 1,
                            PL_Title = "موجود"
                        },
                        new
                        {
                            PL_Id = 2,
                            PL_Title = "ناموجود"
                        },
                        new
                        {
                            PL_Id = 3,
                            PL_Title = "به زودی"
                        });
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("Isspecial")
                        .HasColumnType("bit");

                    b.Property<string>("MainImageProduct")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PL_Id")
                        .HasColumnType("int");

                    b.Property<int>("PS_Id")
                        .HasColumnType("int");

                    b.Property<string>("ProductCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDemo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductPrice")
                        .HasColumnType("int");

                    b.Property<string>("ProductShortDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ProductTitle")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Productmark")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Save")
                        .HasColumnType("int");

                    b.Property<string>("ShortKey")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int?>("SubGroup")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProductTitle");

                    b.HasIndex("SubGroup");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.ProductComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdminRead")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductComments");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.ProductGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("GroupId");

                    b.HasIndex("ParentId");

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.ProductImage", b =>
                {
                    b.Property<int>("PI_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PI_ImageName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("PI_Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.ProductLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LevelPL_Id")
                        .HasColumnType("int");

                    b.Property<int>("PL_Id")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LevelPL_Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductLevels");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.ProductSize", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PS_Id")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SizePS_Id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizePS_Id");

                    b.ToTable("ProductSizes");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.Size", b =>
                {
                    b.Property<int>("PS_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SizeTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PS_Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            PS_Id = 1,
                            SizeTitle = "FreeSize"
                        },
                        new
                        {
                            PS_Id = 2,
                            SizeTitle = "Medium"
                        },
                        new
                        {
                            PS_Id = 3,
                            SizeTitle = "Large"
                        },
                        new
                        {
                            PS_Id = 4,
                            SizeTitle = "Small"
                        },
                        new
                        {
                            PS_Id = 5,
                            SizeTitle = "XXLarge"
                        });
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Slider.Slider", b =>
                {
                    b.Property<int>("SliderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SliderImageName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("SliderId");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Tax.Tax", b =>
                {
                    b.Property<int>("TaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("TaxValue")
                        .HasColumnType("int");

                    b.HasKey("TaxId");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Terms.Term", b =>
                {
                    b.Property<int>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TermDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TermId");

                    b.ToTable("Terms");

                    b.HasData(
                        new
                        {
                            TermId = 1,
                            TermDescription = "<h1>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img alt=\"\" src=\"/Template/image/product/CkEditors Image/b2fe2093e3224a47bbdf2f5f6d8303e7.jpg\" style=\"height:315px; width:851px\" /></h1>\r\n\r\n<h2><strong>متن شرایط و قوانین استفاده از سایت:</strong></h2>\r\n\r\n<p>استفاده از خدمات وب سایت و&nbsp;ایجاد حساب کاربری در&nbsp;به دخت منوط به پذیرش قوانین می باشد .&nbsp;</p>\r\n\r\n<p>لازم به ذکر است که ثبت سفارش نیز در هر زمان به معنی پذیرفتن کلیه قوانین و شرایط به دخت توسط کاربر است.</p>\r\n\r\n<h2><ins><span class=\"marker\"><strong>قوانین عمومی :</strong></span></ins></h2>\r\n\r\n<p>1- تنها خود کاربر می تواند از حساب کاربری و خدمات سایت استفاده نماید و کاربر نباید اطلاعات حساب کاربری خود را در اختیار دیگران قرار دهد.</p>\r\n\r\n<p>2-کاربران برای سفارش حتما باید از منوی کاربری ، آدرس و مشخصات پستی خود را به طور کامل تکمیل کنند و بعد از آن اقدام به ثبت سفارش نمایند.</p>\r\n\r\n<p>3- بدیهی است به فاکتورهای فاقد آدرس کامل پستی ترتیب اثر داده نخواهد شد.</p>\r\n\r\n<p>4- مسئولیت صحت آدرس و اطلاعات وارد شده به عهده ی کاربر است.</p>\r\n\r\n<p>5- هر گونه افترا و تهمت بی پایه و اساس جهت خدشه دار کردن نام به دخت از طرف هر فردی در فضای مجازی منتشر شود ، طبق ماده ی 698 قانون اساسی از فرد اعاده ی حیثیت میشود و اگر فرد حساب کاربری در سایت به دخت داشته باشد ، حساب کاربری شخص مسدود میگردد.</p>\r\n\r\n<p>6- با استناد به قانون جرایم رایانه ای تعیین شده در قانون مجازات های اسلامی و با توجه به مصادیق محتوای مجرمانه جرایم رایانه ای ، در صورت تخلف از قوانین سایت ، پیگیری های قانونی جهت جلوگیری از سوء استفاده متخلفین توسط مراجع ذی صلاح به عمل خواهد آمد.</p>\r\n\r\n<p>7- توجه داشته باشید که کلیه ی اصول و رویه های به دخت ، منطبق با قوانین جمهوری اسلامی ایران و قانون تجارت الکترونیکی و قانون حمایت از حقوق مصرف کننده است و متعاقبا کاربر نیز موظف به رعایت قوانین مرتبط با کاربر است.</p>\r\n\r\n<h2><ins><span class=\"marker\"><strong>ثبت، پردازش ، ارسال و انصراف سفارشات:</strong></span></ins></h2>\r\n\r\n<p>1- روز کاری به معنی روز شنبه تا پنج شنبه هر هفته به استثنای روز های تعطیل رسمی و عمومی در ایران است.&nbsp;</p>\r\n\r\n<p>2- فرایند ارسال بین 7 تا 10 روز کاری زمان می برد.</p>\r\n\r\n<p>3- کلیه سفارش ها در روز های کاری و اولین روز کاری پس از تعطیلات پردازش میشوند.</p>\r\n\r\n<p>4- به دخت به مشتریان خود از 7 روز هفته و 24 ساعت در روز امکان سفارش گذاری می دهد.</p>\r\n\r\n<p>5- با توجه به زمان بندی ارسال ، امکان انصراف سفارشات ثبت و پرداخت شده تنها 12 ساعت پس از ثبت سفارش امکان پذیر است.</p>\r\n\r\n<h2><ins><span class=\"marker\"><strong>نظرات کاربران :</strong></span></ins></h2>\r\n\r\n<p>هدف از ایجاد بخش نظرات کاربران در به دخت ، اشتراک گذاری تجربه ی خرید و کاربری محصولاتی است که به فروش می رسد.</p>\r\n\r\n<p>1- هر کاربر مجاز است در چهارچوب شرایط و قوانین سایت ، نظر یا نظرات خود را به اشتراک بگذارد و پس از بررسی کارشناسان تایید ، نظر را روی سایت مشاهده کند.</p>\r\n\r\n<p>2- بدیهی است که اگر قوانین سایت در نظرات کاربری رعایت نشود ، نظر کاربر تایید نمی شود و در نتیجه در سایت نمایش داده نخواهد شد.</p>\r\n\r\n<p>3- به دخت در قبال درستی یا نادرستی نظرات در سایت مسئولیتی به عهده نخواهد داشت.</p>\r\n\r\n<h2><ins><span class=\"marker\"><strong>شرایط و قوانین درج نظر در بخش نظرات کاربران :</strong></span></ins></h2>\r\n\r\n<p>1- نقد کاربران باید شامل نقاط قوت و ضعف محصول باشد.</p>\r\n\r\n<p>2- در استفاده ی شخصی ، مزایا و معایب به صورت تیتر وار در محل درج شود.</p>\r\n\r\n<p>3-نقد مناسب نقدی است که به طور واقع بینانه ، معایب و مزایای هر محصول را کنار هم بررسی کند.</p>\r\n\r\n<p>4-تنها نظراتی تایید خواهد شد که مرتبط با محصول مورد نظر باشد.</p>\r\n\r\n<p>5- بحث و گفتگو در سایت پذیرفته نمیشود و حذف می گردد.</p>\r\n\r\n<p>6- با توجه به مسئولیت سایت در قبال لینک های موجود در آن ،کاربر نباید لینک سایت دیگری را در نظرات خود ثبت کند.</p>\r\n\r\n<p>7- دقت داشته باشید تا جای ممکن از هر گونه لینک دادن (فرستادن) دیگر کاربران به سایت های دیگر و درج ایمیل یا نام کاربری شبکه های اجتماعی ، خودداری کنید.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>&nbsp;<span class=\"marker\"><strong>در صورتی که در قوانین مندرج تغییراتی در آینده ایجاد شود، در همین صفحه بروزرسانی و منتشر می گردد.</strong></span></h3>\r\n\r\n<h3><span class=\"marker\"><strong>&nbsp;احتمال بروز رسانی قوانین سایت در چندین نوبت در سال وجود دارد.</strong></span></h3>\r\n\r\n<div>\r\n<div>\r\n<div>&nbsp;</div>\r\n\r\n<div>\r\n<div>\r\n<div>&nbsp;</div>\r\n\r\n<div>\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n"
                        });
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.User.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            IsDelete = false,
                            RoleTitle = "مدیر کل سیستم"
                        },
                        new
                        {
                            RoleId = 2,
                            IsDelete = false,
                            RoleTitle = "کاربر عادی"
                        });
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.User.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Activecode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Family")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Ostan")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasMaxLength(300)
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "Behnaz.Etezadi8212@gmail.com",
                            Family = "اعتضادی فر",
                            IsActive = true,
                            IsDelete = false,
                            Name = "بهناز",
                            Password = "20-2C-B9-62-AC-59-07-5B-96-4B-07-15-2D-23-4B-70",
                            RegisterDate = new DateTime(2024, 2, 6, 21, 39, 39, 107, DateTimeKind.Local).AddTicks(4250),
                            UserName = "BehDokhtAdmin"
                        });
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.User.UserDiscountCode", b =>
                {
                    b.Property<int>("UserDiscountCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDiscountCodeId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDiscountCodes");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.User.UserRole", b =>
                {
                    b.Property<int>("U_RId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("U_RId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            U_RId = 1,
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Visitors.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrowserVisitorBrowserId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OperationSystemVisitorOSId")
                        .HasColumnType("int");

                    b.Property<string>("PhisicalPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Protocol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferrerLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisitorDeviceId")
                        .HasColumnType("int");

                    b.HasKey("VisitorId");

                    b.HasIndex("BrowserVisitorBrowserId");

                    b.HasIndex("OperationSystemVisitorOSId");

                    b.HasIndex("VisitorDeviceId");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Visitors.VisitorBrowser", b =>
                {
                    b.Property<int>("VisitorBrowserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Family")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitorBrowserId");

                    b.ToTable("VisitorVersions");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Visitors.VisitorDevice", b =>
                {
                    b.Property<int>("VisitorDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Family")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSpider")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitorDeviceId");

                    b.ToTable("VisitorDevices");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Visitors.VisitorOs", b =>
                {
                    b.Property<int>("VisitorOSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Family")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitorOSId");

                    b.ToTable("VisitorOs");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Wallet.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsPay")
                        .HasColumnType("bit");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WalletTypeTypeId")
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId");

                    b.HasIndex("WalletTypeTypeId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Wallet.WalletType", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("TypeTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("TypeId");

                    b.ToTable("WalletTypes");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            TypeTitle = "واریز"
                        },
                        new
                        {
                            TypeId = 2,
                            TypeTitle = "برداشت"
                        });
                });

            modelBuilder.Entity("ColorProduct", b =>
                {
                    b.HasOne("MyEMShop.Data.Entities.Product.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorsPC_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyEMShop.Data.Entities.Product.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Faq.Faq", b =>
                {
                    b.HasOne("MyEMShop.Data.Entities.Faq.FaqGroup", "FaqGroup")
                        .WithMany("Faqs")
                        .HasForeignKey("FaqGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FaqGroup");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Order.Order", b =>
                {
                    b.HasOne("MyEMShop.Data.Entities.User.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Order.OrderDetail", b =>
                {
                    b.HasOne("MyEMShop.Data.Entities.Order.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyEMShop.Data.Entities.Product.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Permission.Permission", b =>
                {
                    b.HasOne("MyEMShop.Data.Entities.Permission.Permission", null)
                        .WithMany("Permissions")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Permission.RolePermission", b =>
                {
                    b.HasOne("MyEMShop.Data.Entities.Permission.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyEMShop.Data.Entities.User.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.FavoriteProducts", b =>
                {
                    b.HasOne("MyEMShop.Data.Entities.Product.Product", "Product")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.Product", b =>
                {
                    b.HasOne("MyEMShop.Data.Entities.Product.ProductGroup", "productGroup")
                        .WithMany("Products")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyEMShop.Data.Entities.Product.ProductGroup", "GroupSub")
                        .WithMany("SubGroups")
                        .HasForeignKey("SubGroup");

                    b.Navigation("GroupSub");

                    b.Navigation("productGroup");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.ProductComment", b =>
                {
                    b.HasOne("MyEMShop.Data.Entities.Product.Product", "Product")
                        .WithMany("ProductComments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyEMShop.Data.Entities.User.User", "User")
                        .WithMany("ProductComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.ProductGroup", b =>
                {
                    b.HasOne("MyEMShop.Data.Entities.Product.ProductGroup", null)
                        .WithMany("Groups")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.ProductImage", b =>
                {
                    b.HasOne("MyEMShop.Data.Entities.Product.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.ProductLevel", b =>
                {
                    b.HasOne("MyEMShop.Data.Entities.Product.Level", "Level")
                        .WithMany("ProductLevels")
                        .HasForeignKey("LevelPL_Id");

                    b.HasOne("MyEMShop.Data.Entities.Product.Product", "Product")
                        .WithMany("ProductLevels")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.ProductSize", b =>
                {
                    b.HasOne("MyEMShop.Data.Entities.Product.Product", "Product")
                        .WithMany("ProductSizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyEMShop.Data.Entities.Product.Size", "Size")
                        .WithMany("ProductSizes")
                        .HasForeignKey("SizePS_Id");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.User.UserDiscountCode", b =>
                {
                    b.HasOne("MyEMShop.Data.Entities.Order.Discount", "Discount")
                        .WithMany("UserDiscountCodes")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyEMShop.Data.Entities.User.User", "User")
                        .WithMany("UserDiscountCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.User.UserRole", b =>
                {
                    b.HasOne("MyEMShop.Data.Entities.User.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyEMShop.Data.Entities.User.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Visitors.Visitor", b =>
                {
                    b.HasOne("MyEMShop.Data.Entities.Visitors.VisitorBrowser", "Browser")
                        .WithMany("Visitor")
                        .HasForeignKey("BrowserVisitorBrowserId");

                    b.HasOne("MyEMShop.Data.Entities.Visitors.VisitorOs", "OperationSystem")
                        .WithMany("Visitor")
                        .HasForeignKey("OperationSystemVisitorOSId");

                    b.HasOne("MyEMShop.Data.Entities.Visitors.VisitorDevice", "VisitorDevice")
                        .WithMany("Visitor")
                        .HasForeignKey("VisitorDeviceId");

                    b.Navigation("Browser");

                    b.Navigation("OperationSystem");

                    b.Navigation("VisitorDevice");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Wallet.Wallet", b =>
                {
                    b.HasOne("MyEMShop.Data.Entities.User.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyEMShop.Data.Entities.Wallet.WalletType", "WalletType")
                        .WithMany("Wallets")
                        .HasForeignKey("WalletTypeTypeId");

                    b.Navigation("User");

                    b.Navigation("WalletType");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Faq.FaqGroup", b =>
                {
                    b.Navigation("Faqs");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Order.Discount", b =>
                {
                    b.Navigation("UserDiscountCodes");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Order.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Permission.Permission", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.Level", b =>
                {
                    b.Navigation("ProductLevels");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.Product", b =>
                {
                    b.Navigation("FavoriteProducts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductComments");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductLevels");

                    b.Navigation("ProductSizes");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.ProductGroup", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Products");

                    b.Navigation("SubGroups");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Product.Size", b =>
                {
                    b.Navigation("ProductSizes");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.User.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.User.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductComments");

                    b.Navigation("UserDiscountCodes");

                    b.Navigation("UserRoles");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Visitors.VisitorBrowser", b =>
                {
                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Visitors.VisitorDevice", b =>
                {
                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Visitors.VisitorOs", b =>
                {
                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("MyEMShop.Data.Entities.Wallet.WalletType", b =>
                {
                    b.Navigation("Wallets");
                });
#pragma warning restore 612, 618
        }
    }
}
